{
    "title": "Rhino Mocks AAA Quick Start?",
    "answers": [
        "I have written a Rhino Mocks Arrange / Act / Assert (AAA) Syntax Quick Reference. It contains condensed information about this syntax style collected from Ayende's web site  and several other blogs.",
        "I assume that you're familiar with official documentation, which is quite good in my opinion.\nMy suggestion is to try to use Rhino, and when you encounter some more specific problem search for solution wither on SO or somewhere else. I don't think that there is a comprehensive cheat sheet for Rhino mocks. I guess you'll have more luck asking \"How can I do this and that using Rhino Mocks\"\nEdit:\nWell, you don't need to use Record/Playback when targeting AAA.\nThere are three steps involved in AAA:\n\nArrange, which stands for setting up\nthe behavior of mocked class, for example\n\n.\nIOmicronDll mockWrapper = MockRepository.GenerateMock<IOmicronDll>();\nmockWrapper.Expect(wrapper => wrapper.Lock(1, ref errors)).OutRef(string.Empty).Return(true).Repeat.Any();\nmockWrapper.Expect(wrapper => wrapper.Exec(1, \"sys:cfg?(type)\", ref output, ref errors)).OutRef(\"1,CMC 56,0;\", \"\").Return(true).Repeat.Any();\nmockWrapper.Expect(wrapper => wrapper.Exec(\"1\", \"sys:cfg?(type)\", ref output, ref errors)).OutRef(\"1,CMC 56,0;\", \"\").Return(true).Repeat.Any();\nMicrosoft.Practices.Unity.UnityContainer c = new Microsoft.Practices.Unity.UnityContainer();\nc.RegisterInstance<IOmicronDll>(mockWrapper);\n\n\nAct, which stands for executing the tests\npublic Omicron(int deviceID)\n{\n    try\n    {\n        if (g_Omicron == null)\n            g_Omicron = Microsoft.Practices.ServiceLocation.ServiceLocator.Current.GetInstance<CMEngineWrapper.IOmicronDll>();\n        m_UniqueIdentifier = Guid.NewGuid();\n        m_Logger = Microsoft.Practices.ServiceLocation.ServiceLocator.Current.GetInstance<AdvAdmittance.Framework.ILogger>();\n        m_ID = deviceID;\n        GetConfiguration();\n        g_InstancesCount++;\n        m_PollThread = new Thread(new ThreadStart(DoPoll));\n        m_PollThread.Start();\n    }\n\nAnd Assert, which stands for veryfing\nthe results\n\n.\nAssert.AreEqual(\"CMC 56\", omicron.Type);\nmockWrapper.AssertWasCalled(wrapper => wrapper.Release(), options => options.Repeat.AtLeastOnce());\n\nPerhaps the above examples aren't the best, but might get you into right direction.",
        "First make sure you know what you mean for each A in AAA. You may know but I'll include my working definitions for completeness of the answer: \n\nArrange is where I set up inputs, mocks/stubs, the object with the method under test\nAct is where I call the method under test\nAssert is where I verify things occurred or didn't according to expectation\n\nI like to put comments in my test code to remind me to think about each of those things. An example may help clarify: Suppose I have a service layer class which uses two provider layer classes, one from an \"old\" system and one from a \"new\" system; I am testing that the method which copies old things to the new system calls the \"CreateThing\" method one time for each old thing found.\n[Test]\npublic void Should_create_new_Thing_for_each_old_Thing()\n{\n  // -----\n  // arrange\n\n  // hardcode results from old system provider\n  List<Thing> oldThings = new List<Thing> { ... };\n\n  // old system provider\n  var oldProvider = MockRepository.GenerateStub<IOldSystemProvider>();\n  oldProvider.Stub(m=>m.GetThings()).Return(oldThings);\n\n  // new system provider\n  var newProvider = MockRepository.GenerateStub<INewSystemProvider>();\n\n  // service object\n  var svc = new MyService(oldProvider, newProvider);\n\n  //-----------\n  // act\n  var result = svc.CopyThings();\n\n  //------------\n  // assert\n  oldThings.ForEach(thing => \n                    newProvider.AssertWasCalled(prov => prov.CreateThing(thing)));\n}",
        "You'd probably want to start at Ayende's original post on AAA, and than take a look at Ben Hall's nice blog post about AAA. Than you could use all the complete references mentioned in other answers..."
    ],
    "answer_count": 4,
    "tags": [
        "c#",
        "unit-testing",
        "rhino-mocks",
        "arrange-act-assert"
    ],
    "vote_count": 10,
    "content": "I've been looking around for some decent information on using Rhino Mocks 3.5+ with the AAA syntax. I find a lot of blogs that have a mix of things from the old and new which seem to make it more difficult to figure out how to use it.\nWould would be great would be if there were a Rhino Mocks AAA Cheat Sheet like was done for an earlier version. Is it required that you know everything about the older versions of Rhino to actually use the newer version? I'm sure if I were an expert that I would love all the capabilities in Rhino, but for now I'm just swimming in information. Any pointers or good links would be totally appreciated!",
    "url": "http://stackoverflow.com/questions/2124175",
    "view_count": 4801,
    "favorite_count": 3
}